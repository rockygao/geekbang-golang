// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package srv

import (
	"go-project/api/user"
	"go-project/configs"
	"go-project/pkg/app/srv/internal/server/grpc"
	"go-project/pkg/app/srv/internal/server/http"
	"go-project/pkg/app/srv/internal/server/http/hdl"
	"go-project/pkg/boot"
	"go-project/pkg/database"
	"go-project/pkg/repo"
)

// Injectors from wire.go:

func RunSrv() (*App, func(), error) {
	viper, err := configs.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	data, err := database.InitDB(viper)
	if err != nil {
		return nil, nil, err
	}
	dbInitializer := &repo.DbInitializer{
		Ds: data,
	}
	userClient := proto.HelloRpcClient(viper)
	users := &hdl.Users{
		UserClient: userClient,
	}
	hdlHdl := &hdl.Hdl{
		Hello: users,
	}
	engine := boot.DefaultGin()
	initializer := &http.Initializer{
		Hdl:    hdlHdl,
		Router: engine,
	}
	userService := &grpc.UserService{}
	grpcInitializer := &grpc.Initializer{
		Config:      viper,
		UserService: userService,
	}
	bootloader := &Bootloader{
		DbInitializer:   dbInitializer,
		HttpInitializer: initializer,
		GrpcInitializer: grpcInitializer,
	}
	app := &App{
		Bootloader: bootloader,
		Config:     viper,
		DB:         data,
	}
	return app, func() {
	}, nil
}
